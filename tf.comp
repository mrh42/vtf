#version 460
//#extension GL_ARB_separate_shader_objects : enable
//#extension GL_ARB_gpu_shader_int64 : enable
//#extension GL_EXT_debug_printf : enable
//#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
//#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
//#extension GL_EXT_shader_atomic_int64: enable

//
// compile this file with: glslangValidator --target-env vulkan1.3 -V tf.comp
// or glslc --target-env=vulkan1.3 tf.comp
//
// Installing the 'vulkan-amdgpu' package will result in a significant (2.5x) performance increase.
//

// number of threads

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// for speed, we only have space to return one found factor.  In the case of P with multiple close factors,
// which could be found in the same invocation, these will write over each other.  Since we might have 512K threads
// looking at hundreds of factors each, we don't want to allocate memory to avoid this.  So we'll learn of a
// factor, but not all of the found factors.
layout(binding = 0) buffer buf
{	
	uint64_t    P;       // input from CPU side
	uint64_t    K;       // base K input from CPU side
	uint64_t    Found;   // output to tell the CPU we found a K resulting in a factor
	uint        Debug[2];     // output only used for debugging
	uint        Init;    // If this is 0, then we setup our tables once.
	uint     Kn;

};

#define M (60060*17)
//#define M2 (17*19*20*31)
// This is allocated in DEVICE_LOCAL memory, not shared with host.
layout(binding = 1) buffer buf2
{
	uint64_t    M19;
	uint64_t    M23;
	uint64_t    M29;
	int       K6[M];
};

struct uint128 {
	uint64_t Hi, Lo;
};
struct uint256 {
	uint128 H, L;
};
struct uint192 {
	uint64_t H;
	uint128 L;
};

void Set(inout uint256 A, uint128 B) {
	A.L = B;
	A.H.Lo = 0;
	A.H.Hi = 0;
}
void Lsh(inout uint128 A) {
	uint64_t c = A.Lo & (uint64_t(1) << 63);
	A.Lo <<= 1;
	A.Hi <<= 1;
	A.Hi |= c >> 63;
}
void Lsh(inout uint256 A) {
	
	uint64_t c = A.L.Hi & (uint64_t(1) << 63);
	Lsh(A.L);
	Lsh(A.H);
	A.H.Lo |= c >> 63;
}
void Lsh(inout uint192 A) {
	
	uint64_t c = A.L.Hi & (uint64_t(1) << 63);
	Lsh(A.L);
	A.H <<= 1;
	A.H |= c >> 63;
}

void Rsh(inout uint128 A) {
	uint64_t b = A.Hi & 1l;
	A.Hi >>= 1;
	A.Lo >>= 1;
	A.Lo |= b << 63;
}
void Rsh(inout uint192 A) {
	Rsh(A.L);
	uint64_t b = A.H & 1l;
	A.H >>= 1;
	A.L.Hi |= b << 63;
	
}
void Rsh(inout uint256 A) {
	Rsh(A.L);
	uint64_t b = A.H.Lo & 1l;
	Rsh(A.H);
	A.L.Hi |= b << 63;
	
}
int Cmp(uint128 A, uint64_t B) {
	if (A.Hi != 0) {return 1;}
	if (A.Lo > B) {return 1;}
	if (A.Lo < B) {return -1;}
	return 0;
	
}
int Cmp(uint128 A, uint128 B) {
	if (A.Hi > B.Hi || (A.Hi == B.Hi && A.Lo > B.Lo)) {return 1;}
	if (A.Hi < B.Hi || (A.Hi == B.Hi && A.Lo < B.Lo)) {return -1;}
	return 0;
}
int Cmp(uint192 A, uint128 B) {
	if (A.H != 0) {
		return 1;
	}
	return Cmp(A.L, B);
}
int Cmp(uint192 A, uint192 B) {
	if (A.H == B.H) {
		return Cmp(A.L, B.L);
	}
	if (A.H > B.H) {
		return 1;
	}
	if (A.H < B.H) {
		return -1;
	}
}
int Cmp(uint256 A, uint128 B) {
	if (A.H.Hi != 0 || A.H.Lo != 0) {
		return 1;
	}
	return Cmp(A.L, B);
}
int Cmp(uint256 A, uint256 B) {
	int d = Cmp(A.H, B.H);
	if (d != 0) { return d; }
	return Cmp(A.L, B.L);
}
void Inc(inout uint128 A) {
	A.Lo += 1;
	if (A.Lo == 0) {
		A.Hi += 1;
	}
}
void Sub(inout uint128 A, uint128 B) {
	uint64_t x = A.Lo - B.Lo;
	uint64_t C = (((x & B.Lo) & 1l) + (B.Lo >> 1) + (x >> 1)) >> 63;
	A.Hi = A.Hi - (B.Hi + C);
	A.Lo = x;
}
void Sub(inout uint256 A, uint256 B) {
	uint64_t x = A.L.Lo - B.L.Lo;
	uint C = 0;
	if (x > A.L.Lo) {C++;}
	A.L.Lo = x;
	x = A.L.Hi - (B.L.Hi + C);
	C = 0;
	if (x > A.L.Hi) {C++;} 
	A.L.Hi = x;

	x = A.H.Lo - (B.H.Lo + C);
	C = 0;
	if (x > A.H.Lo) {C++;}
	A.H.Lo = x;

	A.H.Hi = A.H.Hi - (B.H.Hi + C);
}
void Sub(inout uint192 A, uint192 B) {
	uint64_t x = A.L.Lo - B.L.Lo;
	uint C = 0;
	if (x > A.L.Lo) {C++;}
	A.L.Lo = x;
	x = A.L.Hi - (B.L.Hi + C);
	C = 0;
	if (x > A.L.Hi) {C++;} 
	A.L.Hi = x;

	A.H = A.H - (B.H + C);
}
void Add(inout uint128 A, uint128 B) {
	uint64_t x = A.Lo + B.Lo;
	uint64_t C = 0;
	if (x < A.Lo) {C++;}
	A.Hi = A.Hi + (B.Hi + C);
	A.Lo = x;
}
bool Zero(uint128 A) {
	return A.Lo == 0 && A.Hi == 0;
}

void multiply64to128(uint64_t x, uint64_t y, out uint128 r)
{
	uint64_t lowbits = 0xfffffffful;
	u64vec4 x4 = u64vec4(x >> 32, x & lowbits, x >> 32, x & lowbits);
	u64vec4 y4 = u64vec4(y >> 32, y >> 32, y & lowbits, y & lowbits);
	u64vec4 p = x4 * y4;

	uint64_t middle = p[2] + (p[3] >> 32) + (p[1] & lowbits);
	r.Hi = p[0] + (middle >> 32) + (p[1] >> 32);
	r.Lo = (middle << 32) | (p[3] & lowbits);

}

//
// Used to compute Q = 2*P*K+1 for each K, and for the 256 multiplies below.
//
void multiply64to128x(uint64_t lhs, uint64_t rhs, inout uint128 r) {

	/* First calculate all of the cross products. */
	uint64_t lo_lo = (lhs & 0xFFFFFFFFul) * (rhs & 0xFFFFFFFFul);
	uint64_t hi_lo = (lhs >> 32)        * (rhs & 0xFFFFFFFFul);
	uint64_t lo_hi = (lhs & 0xFFFFFFFFul) * (rhs >> 32);
	uint64_t hi_hi = (lhs >> 32)        * (rhs >> 32);

	/* Now add the products together. These will never overflow. */
	uint64_t cross = (lo_lo >> 32) + (hi_lo & 0xFFFFFFFFul) + lo_hi;
	uint64_t upper = (hi_lo >> 32) + (cross >> 32)        + hi_hi;

	r.Hi = upper;
	r.Lo = (cross << 32) | (lo_lo & 0xFFFFFFFFul);
}
void Sq256(uint128 A, inout uint256 X) {
	multiply64to128(A.Hi, A.Hi, X.H);
	multiply64to128(A.Lo, A.Lo, X.L);

	uint128 T;
	multiply64to128(A.Hi, A.Lo, T);
	Lsh(T);

	X.L.Hi += T.Lo;
	if (X.L.Hi < T.Lo) {
		Inc(X.H);
	}
	X.H.Lo += T.Hi;
	if (X.H.Lo < T.Hi) {
		X.H.Hi++;
	}
}
void Mul192(uint128 A, uint128 B, out uint192 R) {
	uint64_t lb = 0xfffffffful;
	uint64_t x00 = (A.Lo & lb) * (B.Lo & lb);
	uint64_t x01 = (A.Lo & lb) * (B.Lo >> 32);
	uint64_t x02 = (A.Lo & lb) * (B.Hi & lb);
	uint64_t x10 = (A.Lo >> 32) * (B.Lo & lb);
	uint64_t x11 = (A.Lo >> 32) * (B.Lo >> 32);
	uint64_t x12 = (A.Lo >> 32) * (B.Hi & lb);
	uint64_t x20 = (A.Hi & lb) * (B.Lo & lb);
	uint64_t x21 = (A.Hi & lb) * (B.Lo >> 32);
	uint64_t x22 = (A.Hi & lb) * (B.Hi & lb);

	uint64_t m = (x00 >> 32) + x01 + (x10 & lb);
	uint64_t n = x02 + x11 + x20 + (x10 >> 32) + (m >> 32);
	uint64_t o = x12 + x21 + (n >> 32);
	R.L.Lo = (x00 & lb) | (m << 32);
	R.L.Hi = (n & lb) | (o << 32);
	R.H = (o >> 32) + x22;
}
void Sq192(uint128 A, out uint192 R) {
	uint64_t lb = 0xfffffffful;
	uint64_t alh = A.Lo >> 32;
	uint64_t all = A.Lo & lb;
	uint64_t ahl = A.Hi & lb;
	uint64_t x00 = (all) * (all);
	uint64_t x01 = (all) * (alh);
	uint64_t x02 = (all) * (ahl);
	uint64_t x11 = (alh) * (alh);
	uint64_t x12 = (alh) * (ahl);
	uint64_t x22 = (ahl) * (ahl);

	uint64_t m = (x00 >> 32) + x01 + (x01 & lb);
	uint64_t n = x02 + x11 + x02 + (x01 >> 32) + (m >> 32);
	uint64_t o = x12 + x12  + (n >> 32);
	R.L.Lo = (x00 & lb) | (m << 32);
	R.L.Hi = (n & lb) | (o << 32);
	R.H = (o >> 32) + x22;
}

void Mul256(uint128 A, uint128 B, inout uint256 X) {
	multiply64to128(A.Hi, B.Hi, X.H);
	multiply64to128(A.Lo, B.Lo, X.L);

	uint128 T;
	multiply64to128(B.Hi, A.Lo, T);

	X.L.Hi += T.Lo;
	if (X.L.Hi < T.Lo) {
		Inc(X.H);
	}
	X.H.Lo += T.Hi;
	if (X.H.Lo < T.Hi) {
		X.H.Hi++;
	}

	multiply64to128(A.Hi, B.Lo, T);

	X.L.Hi += T.Lo;
	if (X.L.Hi < T.Lo) {
		Inc(X.H);
	}
	X.H.Lo += T.Hi;
	if (X.H.Lo < T.Hi) {
		X.H.Hi++;
	}
}


// 2^64, 2^128 and 2^192
const 	double p64 =  18446744073709551616.0lf;
const	double p128 = 340282366920938463463374607431768211456.0lf;
const	double p192 = 6277101735386680763835789423207666416102355444464034512896.0lf;

double toF(uint128 A) {
	return double(A.Lo) + double(A.Hi) * p64;
}
double toF(uint192 A) {

	return double(A.L.Lo) + double(A.L.Hi)*p64 + double(A.H)*p128;
}
double toF(uint256 A) {

	return double(A.L.Lo) + double(A.L.Hi)*p64 + double(A.H.Lo)*p128 + double(A.H.Hi)*p192;
}
void fto128(double f, out uint128 A) {
	A.Hi = uint64_t(f / p64);
	A.Lo = uint64_t(f - double(A.Hi) * p64);
}

// Floating point version
void SqMod(inout uint128 A, uint128 Q, bool doshift, double qinv) {
	uint256 X, Y;
	uint128 D;

	Sq256(A, X);
	if (doshift) {
		Lsh(X);
	}

	int i = 0; // limit to 10, in case we have a bug, don't want to get stuck...

	// Using floating point, take a guess at a number D such that we could subtract D*Q to leave our remander.
	// Always guess D a little low, and refine our guess as we get closer.
	// normally takes 2 passes.
	while (i < 10 && Cmp(X, Q) > 0) {

		double x = toF(X);
		fto128(x*qinv, D);
		if (Zero(D)) {
			D.Lo = 1;
		}		
		Mul256(D, Q, Y);

		Sub(X, Y);
		i++;
	}
	//if (i > 3) {Debug[1]++;}
	A = X.L;
}
// Floating point version
void SqMod9(inout uint128 A, uint128 Q, bool doshift, double qinv) {
	uint192 X, Y;
	uint128 D;
	uint192 QQ;
	QQ.H = 0; QQ.L.Lo = Q.Lo; QQ.L.Hi = Q.Hi;

	Sq192(A, X);
	if (doshift) {
		Lsh(X);
	}

	int i = 0; // limit to 10, in case we have a bug, don't want to get stuck...

	// Using floating point, take a guess at a number D such that we could subtract D*Q to leave our remander.
	// Always guess D a little low, and refine our guess as we get closer.
	// normally takes 2 passes.
	//
	while (i < 10 && Cmp(X, Q) > 0) {
		double x = toF(X);
		double xqi = x*qinv;
		fto128(xqi, D);
		if (Zero(D)) {
			D.Lo = 1;
		}
		Mul192(D, Q, Y);
		Sub(X, Y);
		i++;
	}
	//if (gl_GlobalInvocationID.x == 0 && i > 5) {Debug[1]++;}
	A = X.L;
}



bool tf(uint64_t k, uint64_t p, int top) {
	uint128 sq, q;
	multiply64to128(k, p, q);
	Lsh(q);
	Inc(q);

	uint64_t x = q.Lo & 7;
	if (x != 1 && x != 7) {
		Debug[1]++;
	}
	// Make our 1/q just a tiny bit too small, so we don't over estimate,
	// but not so small as to need extra passes.
	double qinv = 0.99999999999999 / toF(q);
	//double qinv =   0.9999999999999994 / toF(q);
	//double qinv = 1.0 / toF(q);

	// Do the TF math: Starting with 1, repeatedly square,
	//  remove the top bit of the exponent and if 1 multiply squared value by 2,
	//  then compute mod Q.
	sq.Lo = 1; sq.Hi = 0;
	for (int b = top; b >= 0; b--) {
		bool bb = (p & (1l << b)) != 0;
		SqMod9(sq, q, bb, qinv);
	}
	// If the result is 1, then we found a factor.
	return sq.Lo == 1 && sq.Hi == 0;
}

void init(uint k) {

	uint64_t pm6 = P % M; 

	if (k < M) {
		uint64_t q = 2 * pm6 * k + 1;
		//if (((q&7) == 3) || ((q&7) == 5) || (q%3 == 0) || (q%5 == 0) || (q%7 == 0) || (q%11 == 0) || (q%13 == 0) || (q%17 == 0) || (q%19 == 0)) {
		if (((q&7) == 3) || ((q&7) == 5) || (q%3 == 0) || (q%5 == 0) || (q%7 == 0) || (q%11 == 0) || (q%13 == 0) || (q%17 == 0)) {
			K6[k] = 0;
		} else {
			K6[k] = 1;
		}
	}

}

void main() {
	// Which thread are we?
	uint I = gl_GlobalInvocationID.x;

	// When called with Init == 0, we need to initialize ourselves and return.
	if (Init == 0) {
		init(I);
		return;
	}

	//
	// K is 64bit and Kn is 32bit.  64bit modulo is a bit slow.
	// The cpu always calls us with K == 0 mod M, and Kn == 0. So we can use Kn%M vs K%M.
	// We have to be careful here that Kn doesn't overflow.
	//
	uint p = uint(P);
	for (int c = 0; c < 4; c++) {
		uint64_t k = 0;
		for (int c = 0; c < 150; c++) {
			uint kn = atomicAdd(Kn, 1);
			k = kn + K;
			if (K6[kn%(M)] == 1)
			{
				break;
			}
			k = 0;
		}

		if (k == 0) {Debug[0]++;continue;}
		//continue;
		int top = int(findMSB((p)));
		if (tf(k, P, top)) {
			Found = k;
			atomicAdd(Debug[1], 1);
		}
	}
}
